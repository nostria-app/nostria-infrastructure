name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'bicep/**'
      - 'scripts/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'bicep/**'
      - 'scripts/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'Azure Resource Group Name'
        required: true
        default: 'nostria'
      location:
        description: 'Azure Location'
        required: true
        default: 'westeurope'
      relayCount:
        description: 'Number of relay instances to deploy'
        required: true
        default: '1'
      mediaCount:
        description: 'Number of media instances to deploy'
        required: true
        default: '1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Azure PowerShell module
      #   uses: azure/powershell@v2
      #   with:
      #     azPSVersion: 'latest'

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Infrastructure
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $resourceGroupName = "${{ github.event.inputs.resourceGroupName || 'nostria' }}"
            $location = "${{ github.event.inputs.location || 'westeurope' }}"
            $relayCount = "${{ github.event.inputs.relayCount || '1' }}"
            $mediaCount = "${{ github.event.inputs.mediaCount || '1' }}"
            
            Write-Host "Deploying infrastructure to resource group: $resourceGroupName in location: $location"
            Write-Host "Relay Count: $relayCount, Media Count: $mediaCount"
            
            ./scripts/deploy.ps1 -ResourceGroupName $resourceGroupName -Location $location -RelayCount $relayCount -MediaCount $mediaCount
          azPSVersion: 'latest'
          
      - name: Log Deployment Results
        shell: pwsh
        run: |
          $resourceGroupName = "${{ github.event.inputs.resourceGroupName || 'nostria' }}"
          Write-Host "Deployment to $resourceGroupName completed"
          
          # Get deployment status using Azure CLI - improved query
          Write-Host "Checking deployment status..."
          $deploymentsJson = az deployment group list --resource-group $resourceGroupName --output json
          $deployments = $deploymentsJson | ConvertFrom-Json
          
          if ($deployments.Count -eq 0) {
            Write-Host "❌ No deployments found in resource group $resourceGroupName"
            exit 1
          }
          
          # Get the most recent deployment (by timestamp instead of name)
          $latestDeployment = $deployments | Sort-Object -Property properties.timestamp -Descending | Select-Object -First 1
          
          if ($latestDeployment) {
            Write-Host "Latest deployment: $($latestDeployment.name), status: $($latestDeployment.properties.provisioningState)"
            
            # Display more detailed information about the deployment
            Write-Host "Deployment timestamp: $($latestDeployment.properties.timestamp)"
            Write-Host "Deployment correlation ID: $($latestDeployment.properties.correlationId)"
            
            if ($latestDeployment.properties.provisioningState -eq "Succeeded") {
              Write-Host "✅ Deployment succeeded"
              exit 0
            } else {
              # Check if the deployment is still in progress
              if ($latestDeployment.properties.provisioningState -eq "Running") {
                Write-Host "⏳ Deployment is still in progress"
                exit 0  # Don't fail the workflow if deployment is still running
              } else {
                Write-Host "❌ Deployment failed with status: $($latestDeployment.properties.provisioningState)"
                
                # Try to get error details if available
                if ($latestDeployment.properties.error) {
                  Write-Host "Error code: $($latestDeployment.properties.error.code)"
                  Write-Host "Error message: $($latestDeployment.properties.error.message)"
                }
                
                exit 1
              }
            }
          } else {
            Write-Host "❌ No deployment found"
            exit 1
          }
